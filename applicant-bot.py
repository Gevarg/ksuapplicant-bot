import asyncio
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, filters

import logging
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [KeyboardButton("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏")],
        [KeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.", reply_markup=reply_markup)


async def handle_message(update: Update, context: CallbackContext):
    question = update.message.text

    response = requests.post('http://127.0.0.1:8000/api/classify_question/', data={'question': question})
    result = response.json()

    category = result.get('category', 'unknown')  # –ü–æ–ª—É—á–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    response = requests.post('http://127.0.0.1:8000/api/get_answer/',
                             data={'question': question, 'category': category})
    result = response.json()
    print(result)
    message = result.get('answer', '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.')

    #  –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    # keyboard = [
    #     [KeyboardButton("üëç –ü–æ–º–æ–≥–ª–æ"), KeyboardButton("üëé –ù–µ –ø–æ–º–æ–≥–ª–æ")]
    # ]
    # reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

    log_data = {
        'query': question,
        'response': message,
        'is_helpful': None
    }
    context.user_data['log_data'] = log_data

async def handle_helpful_button(update: Update, context: CallbackContext):
    log_data = context.user_data.get('log_data')
    if log_data:
        log_data['is_helpful'] = True
        requests.post('http://127.0.0.1:8000/api/log_user_query/', data=log_data)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üòä")

async def handle_not_helpful_button(update: Update, context: CallbackContext):
    log_data = context.user_data.get('log_data')
    if log_data:
        log_data['is_helpful'] = False
        requests.post('http://127.0.0.1:8000/api/log_user_query/', data=log_data)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üòä –ú–Ω–µ —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ª—É—á—à–µ")


async def faq(update: Update, context: CallbackContext) -> None:
    response = requests.get('http://127.0.0.1:8000/api/faq_list/')
    faq_data = response.json()
    faq_texts = "\n\n".join([f" __*{i + 1}. {item['question']}*__ \n\n{item['answer']}\n" for i, item in enumerate(faq_data)])
    await update.message.reply_text(f"__*–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*__\n\n\n{faq_texts}", parse_mode=ParseMode.MARKDOWN)


def main():
    application = Application.builder().token("7148428054:AAGf47FlSRTF6SvsUgJ5hl3voPzRPIvBQUA").build()

    application.add_handler(CommandHandler("start", start))
    # application.add_handler(MessageHandler(filters.Regex('^(üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏)$'), useful_links))
    application.add_handler(MessageHandler(filters.Regex('^(‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã)$'), faq))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.Regex('^(üëç –ü–æ–º–æ–≥–ª–æ)$'), handle_helpful_button))
    application.add_handler(MessageHandler(filters.Regex('^(üëé –ù–µ –ø–æ–º–æ–≥–ª–æ)$'), handle_not_helpful_button))

    application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
